cmake_minimum_required(VERSION 3.22)
project(SCPPSocket)
set(CMAKE_CXX_STANDARD 14)

#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fms-extensions")
#set(DCMAKE_VERBOSE_MAKEFILE on)

if (CMAKE_HOST_WIN32)
    set(WINDOWS 1)
    MESSAGE(STATUS "Now is WINDOWS")
elseif (CMAKE_HOST_APPLE)
    set(MACOS 1)
    MESSAGE(STATUS "Now is APPLE")
elseif (CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    set(LINUX 1)
    MESSAGE(STATUS "Now is LINUX")
endif ()


if(ANDROID)
    MESSAGE(STATUS "Now is ANDROID")
elseif(IOS)
    MESSAGE(STATUS "Now is IOS")
elseif (MACOS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fms-extensions")
    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
    MESSAGE(STATUS "Now is MACOS")
elseif (WINDOWS)
    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
    MESSAGE(STATUS "Now is WINDOWS")
elseif (LINUX)
    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
    MESSAGE(STATUS "Now is LINUX")
endif ()

MESSAGE(STATUS ${ANDROID})
MESSAGE(STATUS ${MACOS})
MESSAGE(STATUS ${LINUX})
MESSAGE(STATUS ${WINDOWS})
MESSAGE(STATUS ${IOS})
#set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
aux_source_directory(. DIR_SRCS1)
if(ANDROID)
    aux_source_directory(./Android DIR_SRCS2)
    add_library(SCPPSocketAndroid SHARED ${DIR_SRCS1} ${DIR_SRCS2})
elseif(IOS)
elseif (MACOS)
    aux_source_directory(./Mac DIR_SRCS2)
    add_library(SCPPSocketMac ${DIR_SRCS1} ${DIR_SRCS2})
elseif (WINDOWS)
    aux_source_directory(./Win DIR_SRCS2)
    add_library(SCPPSocketWin ${DIR_SRCS1} ${DIR_SRCS2})
elseif (LINUX)
    aux_source_directory(./Linux DIR_SRCS2)
    add_library(SCPPSocketLinux ${DIR_SRCS1} ${DIR_SRCS2})

endif ()

